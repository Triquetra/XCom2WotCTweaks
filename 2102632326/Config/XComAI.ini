[XComGame.X2AIBTBehaviorTree]

; Default:
; Normally standard attacks favor XCOM soldiers with low health (to finish them off). 
-Behaviors=(BehaviorName=TargetScoreHealth_HighFirst, NodeType=Selector, Child[0]=PenalizeIfKillShot, Child[1]=ScoreIfTarget_MaxHP, Child[2]=ScoreIfTarget_HighHP, Child[3]=AddToTargetScore_5)
-Behaviors=(BehaviorName=PenalizeIfKillShot, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=AddToTargetScore_0) ; If the attack would kill the target, deemphasize (but don't ignore)
-Behaviors=(BehaviorName=ScoreIfTarget_MaxHP, NodeType=Sequence, Child[0]=TargetHasMaxHP, Child[1]=AddToTargetScore_20) ; bump a max health target to the next aim tier with a bonus
-Behaviors=(BehaviorName=ScoreIfTarget_HighHP, NodeType=Sequence, Child[0]=TargetHasHighHP, Child[1]=AddToTargetScore_10) ; high hp is valued target, but not more than much better hit chance

; Health Scoring - Standard / Opportunist (prioritize low health)
-Behaviors=(BehaviorName=TargetScoreHealth, NodeType=Selector, Child[0]=ScoreIfKillShot, Child[1]=ScoreIfTargetLowHP, Child[2]=ScoreIfTargetWounded, Child[3]=AddToTargetScore_0)
-Behaviors=(BehaviorName=ScoreIfKillShot, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=AddToTargetScore_15) ; bump a kill shot up to the next aim tier with a bonus`
-Behaviors=(BehaviorName=ScoreIfTargetLowHP, NodeType=Sequence, Child[0]=TargetHasLowHP, Child[1]=AddToTargetScore_10) ; low hp but not kill shot is valued target, but not more than much better hit chance
-Behaviors=(BehaviorName=ScoreIfTargetWounded, NodeType=Sequence, Child[0]=TargetWounded, Child[1]=AddToTargetScore_5) ; in case of aim quality tie, shoot wounded target

; Default Health-based score scaling favors beefier targets (those with higher max HP) 
; with slight prefernce for less wounded targets (those with higher current HP)
-Behaviors=(BehaviorName=TargetScoreByScaledMaxStat-eStat_HP, NodeType=Action, Param[0]=10) ; add to score x times max HP
-Behaviors=(BehaviorName=TargetScoreByScaledCurrStat-eStat_HP, NodeType=Action, Param[0]=1) ; add to score x times current HP

; Default Target condition definitions for reference
; Behaviors=(BehaviorName=TargetHasLowHP, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="40%")
; Behaviors=(BehaviorName=TargetHasHighHP, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="75%")
; Behaviors=(BehaviorName=TargetHasMaxHP, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="100%")
; Behaviors=(BehaviorName=TargetWounded, NodeType=Inverter, Child[0]=TargetHasMaxHP)
-Behaviors=(BehaviorName=ScoreByHP, NodeType=Sequence, Child[0]=TargetScoreByScaledMaxStat-eStat_HP, Child[1]=TargetScoreByScaledCurrStat-eStat_HP)



; Alex Nares: 
; Enemies avoid shootng injured soldiers (unless that's all in range) and favor higher health targets.
;+Behaviors=(BehaviorName=TargetScoreHealth, NodeType=Selector, Child[0]=PenalizeIfKillShot, Child[1]=ScoreIfTarget_MaxHP, Child[2]=ScoreIfTarget_HighHP, Child[3]=ScoreIfKillShot, Child[4]=ScoreIfTargetLowHP, Child[5]=ScoreIfTargetWounded, Child[6]=ScoreByHP, Child[7]=AddToTargetScore_5)
;+Behaviors=(BehaviorName=ScoreIfKillShot, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=AddToTargetScore_0) 
;+Behaviors=(BehaviorName=ScoreIfTargetLowHP, NodeType=Sequence, Child[0]=TargetHasLowHP, Child[1]=AddToTargetScore_0) 
;+Behaviors=(BehaviorName=ScoreIfTargetWounded, NodeType=Sequence, Child[0]=TargetWounded, Child[1]=AddToTargetScore_0) 

; Health Scoring - Strongest First (prioritize high health), ignore low health UNLESS kill shot
; changing most "do not favors" from reducing the score to adding a bonus if the condition ISN'T true, to garaunteed that someone will be shot at.
;+Behaviors=(BehaviorName=TargetScoreHealth_HighFirst, NodeType=Selector, Child[0]=PenalizeIfKillShot, Child[1]=ScoreIfTarget_MaxHP, Child[2]=ScoreIfTarget_HighHP, Child[3]=ScoreIfKillShot, Child[4]=ScoreIfTargetLowHP, Child[5]=ScoreIfTargetWounded, Child[6]=ScoreByHP, Child[7]=AddToTargetScore_5)
;+Behaviors=(BehaviorName=PenalizeIfKillShot, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=AddToTargetScore_-15)
;+Behaviors=(BehaviorName=ScoreIfTarget_MaxHP, NodeType=Sequence, Child[0]=TargetHasMaxHP, Child[1]=AddToTargetScore_0)
;+Behaviors=(BehaviorName=ScoreIfTarget_HighHP, NodeType=Sequence, Child[0]=TargetHasHighHP, Child[1]=AddToTargetScore_0)

;+Behaviors=(BehaviorName=TargetScoreByScaledMaxStat-eStat_HP, NodeType=Action, Param[0]=0)
;+Behaviors=(BehaviorName=TargetScoreByScaledCurrStat-eStat_HP, NodeType=Action, Param[0]=10)



; Thalioden: 
; When seeking high health targets, avoid one-hit kills
+Behaviors=(BehaviorName=TargetScoreHealth_HighFirst, NodeType=Selector, Child[0]=PenalizeIfKillShot, Child[1]=ScoreIfTarget_MaxHP, Child[2]=ScoreIfTarget_HighHP, Child[3]=ScoreByHP, Child[4]=AddToTargetScore_5)
+Behaviors=(BehaviorName=PenalizeIfKillShot, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=AddToTargetScore_-20)  ; avoid one-shot kills on high health targets
+Behaviors=(BehaviorName=ScoreIfTarget_MaxHP, NodeType=Sequence, Child[0]=TargetHasMaxHP, Child[1]=AddToTargetScore_10)    ; favor max HP but not more than much better hit chance, cumulative with high HP
+Behaviors=(BehaviorName=ScoreIfTarget_HighHP, NodeType=Sequence, Child[0]=TargetHasHighHP, Child[1]=AddToTargetScore_10)  ; high HP is valued target, but not more than much better hit chance

; When not seeking high health targets, prioritize kill shots
+Behaviors=(BehaviorName=TargetScoreHealth, NodeType=Selector, Child[0]=ScoreIfKillShot, Child[1]=ScoreByHP, Child[2]=AddToTargetScore_5)
+Behaviors=(BehaviorName=ScoreIfKillShot, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=AddToTargetScore_15) 
+Behaviors=(BehaviorName=ScoreIfTargetLowHP, NodeType=Sequence, Child[0]=TargetHasLowHP, Child[1]=AddToTargetScore_10) 
+Behaviors=(BehaviorName=ScoreIfTargetWounded, NodeType=Sequence, Child[0]=TargetWounded, Child[1]=AddToTargetScore_5) 

; Prioritize current health over max health
; when health equal, prioritize beefier targets (those with grater max health)
; prefer more threatening targets (those not subject to red fog penalties)
+Behaviors=(BehaviorName=ScoreByHP, NodeType=Sequence, Child[0]=TargetScoreByScaledMaxStat-eStat_HP, Child[1]=TargetScoreByScaledCurrStat-eStat_HP, Child[2]=ScoreBySRF)
+Behaviors=(BehaviorName=TargetScoreByScaledMaxStat-eStat_HP, NodeType=Action, Param[0]=5)
+Behaviors=(BehaviorName=TargetScoreByScaledCurrStat-eStat_HP, NodeType=Action, Param[0]=10)

; wound categories based on modified Simple Red Fog config
+Behaviors=(BehaviorName=TargetSRFLightlyWounded,    NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="60%")    ; 75% is SRF default
+Behaviors=(BehaviorName=TargetSRFModeratelyWounded, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="40%")    ; 50% is SRF default
+Behaviors=(BehaviorName=TargetSRFSeverelyWounded,   NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="20%")    ; 25% is SRF default
+Behaviors=(BehaviorName=ScoreIfTarget_SRFLightlyWounded, NodeType=Sequence, Child[0]=TargetSRFLightlyWounded, Child[1]=AddToTargetScore_-5)
+Behaviors=(BehaviorName=ScoreIfTarget_SRFModeratelyWounded, NodeType=Sequence, Child[0]=TargetSRFModeratelyWounded, Child[1]=AddToTargetScore_-5) ; wound scores are cumulative
+Behaviors=(BehaviorName=ScoreIfTarget_SRFSeverelyWounded, NodeType=Sequence, Child[0]=TargetSRFSeverelyWounded, Child[1]=AddToTargetScore_-10)
+Behaviors=(BehaviorName=ScoreBySRF, NodeType=Sequence, Child[0]=ScoreIfTarget_SRFLightlyWounded, Child[1]=ScoreIfTarget_SRFLightlyWounded, Child[2]=ScoreIfTarget_SRFLightlyWounded)
